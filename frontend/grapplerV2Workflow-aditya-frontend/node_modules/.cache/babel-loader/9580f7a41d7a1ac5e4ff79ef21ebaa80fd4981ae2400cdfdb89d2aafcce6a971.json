{"ast":null,"code":"// WebSocketService.js\nimport { Client } from '@stomp/stompjs';\nlet stompClient = null;\nexport const connect = () => {\n  const socket = new WebSocket('/websocket-endpoint'); // Replace with your WebSocket endpoint\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000\n  });\n  stompClient.onConnect = () => {\n    console.log('Connected to WebSocket');\n  };\n  stompClient.onDisconnect = () => {\n    console.log('Disconnected from WebSocket');\n  };\n  stompClient.activate();\n};\nexport const disconnect = () => {\n  if (stompClient !== null) {\n    stompClient.deactivate();\n  }\n};\nexport const sendMessage = message => {\n  if (stompClient && stompClient.connected) {\n    stompClient.publish({\n      destination: '/app/sendMessage',\n      body: JSON.stringify({\n        message\n      })\n    });\n  } else {\n    console.error('WebSocket is not connected. Cannot send message.');\n  }\n};\nexport const subscribeToMessages = callback => {\n  if (stompClient && stompClient.connected) {\n    stompClient.subscribe('/topic/messages', response => {\n      const message = JSON.parse(response.body);\n      callback(message);\n    });\n  } else {\n    console.error('WebSocket is not connected. Cannot subscribe to messages. Will try again after connection is established.');\n  }\n};","map":{"version":3,"names":["Client","stompClient","connect","socket","WebSocket","webSocketFactory","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","console","log","onDisconnect","activate","disconnect","deactivate","sendMessage","message","connected","publish","destination","body","JSON","stringify","error","subscribeToMessages","callback","subscribe","response","parse"],"sources":["C:/grapplerV2Workflow-aditya-frontend/src/Api/WebSocketService.js"],"sourcesContent":["// WebSocketService.js\r\nimport { Client } from '@stomp/stompjs';\r\n\r\nlet stompClient = null;\r\n\r\nexport const connect = () => {\r\n    const socket = new WebSocket('/websocket-endpoint'); // Replace with your WebSocket endpoint\r\n    stompClient = new Client({\r\n        webSocketFactory: () => socket,\r\n        reconnectDelay: 5000,\r\n        heartbeatIncoming: 4000,\r\n        heartbeatOutgoing: 4000,\r\n    });\r\n\r\n    stompClient.onConnect = () => {\r\n        console.log('Connected to WebSocket');\r\n    };\r\n\r\n    stompClient.onDisconnect = () => {\r\n        console.log('Disconnected from WebSocket');\r\n    };\r\n\r\n    stompClient.activate();\r\n};\r\n\r\nexport const disconnect = () => {\r\n    if (stompClient !== null) {\r\n        stompClient.deactivate();\r\n    }\r\n};\r\n\r\nexport const sendMessage = (message) => {\r\n    if (stompClient && stompClient.connected) {\r\n        stompClient.publish({\r\n            destination: '/app/sendMessage',\r\n            body: JSON.stringify({ message }),\r\n        });\r\n    } else {\r\n        console.error('WebSocket is not connected. Cannot send message.');\r\n    }\r\n};\r\n\r\nexport const subscribeToMessages = (callback) => {\r\n    if (stompClient && stompClient.connected) {\r\n        stompClient.subscribe('/topic/messages', (response) => {\r\n            const message = JSON.parse(response.body);\r\n            callback(message);\r\n        });\r\n    } else {\r\n        console.error('WebSocket is not connected. Cannot subscribe to messages. Will try again after connection is established.');\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA,SAASA,MAAM,QAAQ,gBAAgB;AAEvC,IAAIC,WAAW,GAAG,IAAI;AAEtB,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EACzB,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;EACrDH,WAAW,GAAG,IAAID,MAAM,CAAC;IACrBK,gBAAgB,EAAEA,CAAA,KAAMF,MAAM;IAC9BG,cAAc,EAAE,IAAI;IACpBC,iBAAiB,EAAE,IAAI;IACvBC,iBAAiB,EAAE;EACvB,CAAC,CAAC;EAEFP,WAAW,CAACQ,SAAS,GAAG,MAAM;IAC1BC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACzC,CAAC;EAEDV,WAAW,CAACW,YAAY,GAAG,MAAM;IAC7BF,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC9C,CAAC;EAEDV,WAAW,CAACY,QAAQ,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAC5B,IAAIb,WAAW,KAAK,IAAI,EAAE;IACtBA,WAAW,CAACc,UAAU,CAAC,CAAC;EAC5B;AACJ,CAAC;AAED,OAAO,MAAMC,WAAW,GAAIC,OAAO,IAAK;EACpC,IAAIhB,WAAW,IAAIA,WAAW,CAACiB,SAAS,EAAE;IACtCjB,WAAW,CAACkB,OAAO,CAAC;MAChBC,WAAW,EAAE,kBAAkB;MAC/BC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEN;MAAQ,CAAC;IACpC,CAAC,CAAC;EACN,CAAC,MAAM;IACHP,OAAO,CAACc,KAAK,CAAC,kDAAkD,CAAC;EACrE;AACJ,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAIC,QAAQ,IAAK;EAC7C,IAAIzB,WAAW,IAAIA,WAAW,CAACiB,SAAS,EAAE;IACtCjB,WAAW,CAAC0B,SAAS,CAAC,iBAAiB,EAAGC,QAAQ,IAAK;MACnD,MAAMX,OAAO,GAAGK,IAAI,CAACO,KAAK,CAACD,QAAQ,CAACP,IAAI,CAAC;MACzCK,QAAQ,CAACT,OAAO,CAAC;IACrB,CAAC,CAAC;EACN,CAAC,MAAM;IACHP,OAAO,CAACc,KAAK,CAAC,2GAA2G,CAAC;EAC9H;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}