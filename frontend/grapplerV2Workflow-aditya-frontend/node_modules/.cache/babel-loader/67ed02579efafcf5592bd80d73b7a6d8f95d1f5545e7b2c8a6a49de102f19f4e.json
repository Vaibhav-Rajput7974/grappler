{"ast":null,"code":"// // WebSocketService.js\n\n// import React, { useEffect } from 'react';\n// import { Client } from '@stomp/stompjs';\n\n// const WebSocketComponent = () => {\n//   useEffect(() => {\n//     const socket = new WebSocket('wss://localhost:8080/ws'); // Replace with your WebSocket endpoint\n\n//     // Create a Stomp client over the WebSocket\n//     const stompClient = new Client({\n//       webSocketFactory: () => socket,\n//       reconnectDelay: 5000,\n//       heartbeatIncoming: 4000,\n//       heartbeatOutgoing: 4000,\n//     });\n\n//     // Activate the Stomp client\n//     stompClient.activate();\n//     stompClient.onConnect = () => {\n//         console.log('Connected to WebSocket');\n//         // Now, it's safe to perform actions like subscribing to topics.\n//     };\n\n//     // Subscribe to a topic\n//     // const subscription = stompClient.subscribe('/topic/messages', (response) => {\n//     //   const message = JSON.parse(response.body);\n//     //   console.log('Received message:', message);\n//     // });\n\n//     // Clean up the subscription and WebSocket connection on component unmount\n//     return () => {\n//     //   subscription.unsubscribe();\n//     //   stompClient.deactivate();\n//     };\n//   }, []); // Empty dependency array ensures that this effect runs only once on mount\n\n//   return (\n//     <div>\n//       <h1>WebSocket Connection</h1>\n//       <p>Check the console for received messages.</p>\n//     </div>\n//   );\n// };\n\n// export default WebSocketComponent;\n\n// // export const connect = () => {\n// //     const socket = new WebSocket('ws://localhost:8080/websocket-endpoint'); // Replace with your WebSocket endpoint\n// //     stompClient = new Client({\n// //         webSocketFactory: () => socket,\n// //         reconnectDelay: 5000,\n// //         heartbeatIncoming: 4000,\n// //         heartbeatOutgoing: 4000,\n// //     });\n\n// //     stompClient.onConnect = () => {\n// //         console.log('Connected to WebSocket');\n// //     };\n\n// //     stompClient.onDisconnect = () => {\n// //         console.log('Disconnected from WebSocket');\n// //     };\n\n// //     stompClient.activate();\n// // };\n\n// // export const disconnect = () => {\n// //     if (stompClient !== null) {\n// //         stompClient.deactivate();\n// //     }\n// // };\n\n// // export const sendMessage = (message) => {\n// //     if (stompClient && stompClient.connected) {\n// //         stompClient.publish({\n// //             destination: '/app/sendMessage',\n// //             body: JSON.stringify({ message }),\n// //         });\n// //     } else {\n// //         console.error('WebSocket is not connected. Cannot send message.');\n// //     }\n// // };\n\n// // export const subscribeToMessages = (callback) => {\n// //     if (stompClient && stompClient.connected) {\n// //         stompClient.subscribe('/topic/messages', (response) => {\n// //             const message = JSON.parse(response.body);\n// //             callback(message);\n// //         });\n// //     } else {\n// //         console.error('WebSocket is not connected. Cannot subscribe to messages. Will try again after connection is established.');\n// //     }\n// // };\n\nimport Stomp from 'stompjs';\nimport SockJS from 'sockjs-client';\nconst socketUrl = 'http://localhost:8080/ws';\nconst stompClient = Stomp.over(new SockJS(socketUrl));\nconst connect = () => {\n  stompClient.connect({}, () => {\n    stompClient.subscribe('/topic/messages', message => {\n      // Handle incoming messages\n      console.log(JSON.parse(message.body));\n    });\n  });\n};\nconst sendMessage = message => {\n  stompClient.send('/app/chat', {}, JSON.stringify(message));\n};\nexport { connect, sendMessage };","map":{"version":3,"names":["Stomp","SockJS","socketUrl","stompClient","over","connect","subscribe","message","console","log","JSON","parse","body","sendMessage","send","stringify"],"sources":["C:/grapplerV2Workflow-aditya-frontend/src/Api/WebSocketService.js"],"sourcesContent":["// // WebSocketService.js\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { Client } from '@stomp/stompjs';\r\n\r\n// const WebSocketComponent = () => {\r\n//   useEffect(() => {\r\n//     const socket = new WebSocket('wss://localhost:8080/ws'); // Replace with your WebSocket endpoint\r\n\r\n//     // Create a Stomp client over the WebSocket\r\n//     const stompClient = new Client({\r\n//       webSocketFactory: () => socket,\r\n//       reconnectDelay: 5000,\r\n//       heartbeatIncoming: 4000,\r\n//       heartbeatOutgoing: 4000,\r\n//     });\r\n\r\n//     // Activate the Stomp client\r\n//     stompClient.activate();\r\n//     stompClient.onConnect = () => {\r\n//         console.log('Connected to WebSocket');\r\n//         // Now, it's safe to perform actions like subscribing to topics.\r\n//     };\r\n\r\n//     // Subscribe to a topic\r\n//     // const subscription = stompClient.subscribe('/topic/messages', (response) => {\r\n//     //   const message = JSON.parse(response.body);\r\n//     //   console.log('Received message:', message);\r\n//     // });\r\n\r\n//     // Clean up the subscription and WebSocket connection on component unmount\r\n//     return () => {\r\n//     //   subscription.unsubscribe();\r\n//     //   stompClient.deactivate();\r\n//     };\r\n//   }, []); // Empty dependency array ensures that this effect runs only once on mount\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>WebSocket Connection</h1>\r\n//       <p>Check the console for received messages.</p>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default WebSocketComponent;\r\n\r\n// // export const connect = () => {\r\n// //     const socket = new WebSocket('ws://localhost:8080/websocket-endpoint'); // Replace with your WebSocket endpoint\r\n// //     stompClient = new Client({\r\n// //         webSocketFactory: () => socket,\r\n// //         reconnectDelay: 5000,\r\n// //         heartbeatIncoming: 4000,\r\n// //         heartbeatOutgoing: 4000,\r\n// //     });\r\n\r\n// //     stompClient.onConnect = () => {\r\n// //         console.log('Connected to WebSocket');\r\n// //     };\r\n\r\n// //     stompClient.onDisconnect = () => {\r\n// //         console.log('Disconnected from WebSocket');\r\n// //     };\r\n\r\n// //     stompClient.activate();\r\n// // };\r\n\r\n// // export const disconnect = () => {\r\n// //     if (stompClient !== null) {\r\n// //         stompClient.deactivate();\r\n// //     }\r\n// // };\r\n\r\n// // export const sendMessage = (message) => {\r\n// //     if (stompClient && stompClient.connected) {\r\n// //         stompClient.publish({\r\n// //             destination: '/app/sendMessage',\r\n// //             body: JSON.stringify({ message }),\r\n// //         });\r\n// //     } else {\r\n// //         console.error('WebSocket is not connected. Cannot send message.');\r\n// //     }\r\n// // };\r\n\r\n// // export const subscribeToMessages = (callback) => {\r\n// //     if (stompClient && stompClient.connected) {\r\n// //         stompClient.subscribe('/topic/messages', (response) => {\r\n// //             const message = JSON.parse(response.body);\r\n// //             callback(message);\r\n// //         });\r\n// //     } else {\r\n// //         console.error('WebSocket is not connected. Cannot subscribe to messages. Will try again after connection is established.');\r\n// //     }\r\n// // };\r\n\r\n\r\nimport Stomp from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\n\r\nconst socketUrl = 'http://localhost:8080/ws';\r\nconst stompClient = Stomp.over(new SockJS(socketUrl));\r\n\r\nconst connect = () => {\r\n    stompClient.connect({}, () => {\r\n        stompClient.subscribe('/topic/messages', (message) => {\r\n            // Handle incoming messages\r\n            console.log(JSON.parse(message.body));\r\n        });\r\n    });\r\n};\r\n\r\nconst sendMessage = (message) => {\r\n    stompClient.send('/app/chat', {}, JSON.stringify(message));\r\n};\r\n\r\nexport { connect, sendMessage };\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,MAAM,SAAS;AAC3B,OAAOC,MAAM,MAAM,eAAe;AAElC,MAAMC,SAAS,GAAG,0BAA0B;AAC5C,MAAMC,WAAW,GAAGH,KAAK,CAACI,IAAI,CAAC,IAAIH,MAAM,CAACC,SAAS,CAAC,CAAC;AAErD,MAAMG,OAAO,GAAGA,CAAA,KAAM;EAClBF,WAAW,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;IAC1BF,WAAW,CAACG,SAAS,CAAC,iBAAiB,EAAGC,OAAO,IAAK;MAClD;MACAC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACK,IAAI,CAAC,CAAC;IACzC,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC;AAED,MAAMC,WAAW,GAAIN,OAAO,IAAK;EAC7BJ,WAAW,CAACW,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,EAAEJ,IAAI,CAACK,SAAS,CAACR,OAAO,CAAC,CAAC;AAC9D,CAAC;AAED,SAASF,OAAO,EAAEQ,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}