{"ast":null,"code":"var _jsxFileName = \"C:\\\\grapplerV2Workflow-aditya-frontend\\\\src\\\\components\\\\Rule\\\\AddRule.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddRule = ({\n  show,\n  handleClose\n}) => {\n  _s();\n  const {\n    projectById\n  } = useSelector(state => state.Project);\n  const {\n    status\n  } = projectById;\n  const {\n    stageList\n  } = projectById;\n\n  // const [formData, setFormData] = useState({\n  //     triggerType: \"Status_Change\",\n  //     previousTrigger: \"\",\n  //     currentTrigger: \"\",\n  //     actionType: \"\",\n  //     action: \"\",\n  // });\n\n  // const handleInputChange = (e) => {\n  //     const { name, value } = e.target;\n  //     setFormData((prevData) => ({\n  //         ...prevData,\n  //         [name]: value,\n  //     }));\n  // };\n  const handleCreateRule = () => {\n    // API call to create rule with formData\n    // if (formData.triggerType === \"Due_Date_Approcharging\") {\n    //     formData.triggerType = \"Date_Seduled\";\n    //     formData.previousTrigger = \"before\";\n    // }\n    // if (formData.triggerType === \"Task_OverDue\") {\n    //     formData.triggerType = \"Date_Seduled\";\n    //     formData.previousTrigger = \"after\";\n    // }\n    // if(formData.actionType === \"Change_Stage\"){\n    //     const selectedStage = stageList.find(\n    //         (stage) => stage.stageName === formData.action\n    //       );\n    //     const stageId = selectedStage?.stageId;\n    //     formData.action=stageId;\n    // }\n\n    axios.post(`http://localhost:8080/projects/${projectById.projectId}/rules`\n    //   formData\n    ).then(response => {\n      console.log(\"API call successful:\", response.data.data);\n    }).catch(error => {\n      console.error(\"Error updating data: \", error);\n    });\n    // setFormData({\n    //     triggerType: \"Status_Change\",\n    //     previousTrigger: \"\",\n    //     currentTrigger: \"\",\n    //     actionType: \"\",\n    //     action: \"\",\n    // });\n    handleClose();\n  };\n\n  // const renderTriggerOptions = () => {\n  //     if (formData.triggerType === \"Status_Change\") {\n  //         return (\n  //             <div>\n  //                 {/* Status Change specific options */}\n  //                 <div className=\"form-group\">\n  //                     <label>Previous Status</label>\n  //                     <select\n  //                         className=\"form-control\"\n  //                         name=\"previousTrigger\"\n  //                         value={formData.previousTrigger}\n  //                         onChange={handleInputChange}\n  //                     >\n  //                         <option key=\"option\" value=\"option\">\n  //                             Any\n  //                         </option>\n  //                         {status?.map((status) => (\n  //                             <option key={status} value={status}>\n  //                                 {status}\n  //                             </option>\n  //                         ))}\n\n  //                     </select>\n  //                     <label>Next Status</label>\n  //                     <select\n  //                         className=\"form-control\"\n  //                         name=\"currentTrigger\"\n  //                         value={formData.currentTrigger}\n  //                         onChange={handleInputChange}\n  //                     >\n  //                         <option key=\"option\" value=\"option\">\n  //                             Any\n  //                         </option>\n  //                         {status?.map((status) => (\n  //                             <option key={status} value={status}>\n  //                                 {status}\n  //                             </option>\n  //                         ))}\n\n  //                     </select>\n  //                 </div>\n  //                 {/* ... add more fields */}\n  //             </div>\n  //         );\n  //     } else if (formData.triggerType === \"Stage_Change\") {\n  //         return (\n  //             <div>\n  //                 {/* Stage Change specific options */}\n  //                 <div className=\"form-group\">\n  //                     <label>Previous Stage</label>\n  //                     <select\n  //                         className=\"form-control\"\n  //                         name=\"previousTrigger\"\n  //                         value={formData.previousTrigger}\n  //                         onChange={handleInputChange}\n  //                     >\n  //                         <option key=\"Any\" value=\"Any\">\n  //                             Any\n  //                         </option>\n  //                         {stageList?.map((stage) => (\n  //                             <option key={stage.stageId} value={stage.stageName}>\n  //                                 {stage.stageName}\n  //                             </option>\n  //                         ))}\n  //                     </select>\n\n  //                 </div>\n  //                 <div className=\"form-group\">\n  //                     <label>Current Stage</label>\n  //                     <select\n  //                         className=\"form-control\"\n  //                         name=\"action\"\n  //                         value={formData.action}\n  //                         onChange={handleInputChange}\n  //                     >\n  //                         <option key=\"Any\" value=\"Any\">\n  //                             Any\n  //                         </option>\n  //                         {stageList?.map((stage) => (\n  //                             <option key={stage.stageId} value={stage.stageName}>\n  //                                 {stage.stageName}\n  //                             </option>\n  //                         ))}\n  //                     </select>\n  //                 </div>\n  //                 {/* ... add more fields */}\n  //             </div>\n  //         );\n  //     } else if (formData.triggerType === \"Due_Date_Approcharging\") {\n  //         return (\n  //             <div>\n  //                 {/* Due Date Change specific options */}\n  //                 <div className=\"form-group\">\n  //                     <label>Day before</label>\n  //                     <input\n  //                         type=\"number\"\n  //                         className=\"form-control\"\n  //                         name=\"currentTrigger\"\n  //                         value={formData.currentTrigger}\n  //                         onChange={handleInputChange}\n  //                         min=\"1\"\n  //                     />\n  //                 </div>\n  //                 {/* ... add more fields */}\n  //             </div>\n  //         );\n  //     } else if (formData.triggerType === \"Task_OverDue\") {\n  //         return (\n  //             <div>\n  //                 <div className=\"form-group\">\n  //                     <label>Day After</label>\n  //                     <input\n  //                         type=\"number\"\n  //                         className=\"form-control\"\n  //                         name=\"currentTrigger\"\n  //                         value={formData.currentTrigger}\n  //                         onChange={handleInputChange}\n  //                         min=\"1\"\n  //                     />\n  //                 </div>\n  //             </div>\n  //         );\n  //     }\n  //     return null; // Return null if no matching trigger type\n  // };\n\n  // const renderActionOptions = () => {\n  //     if (formData.actionType === \"Change_Status\") {\n  //         return (\n  //             <div>\n  //                 {/* Status Change specific options */}\n  //                 <div className=\"form-group\">\n  //                     <label>Next Status</label>\n  //                     <select\n  //                         className=\"form-control\"\n  //                         name=\"action\"\n  //                         value={formData.action}\n  //                         onChange={handleInputChange}\n  //                     >\n  //                         <option key=\"option\" value=\"option\">\n  //                             Any\n  //                         </option>\n  //                         {status?.map((status) => (\n  //                             <option key={status} value={status}>\n  //                                 {status}\n  //                             </option>\n  //                         ))}\n\n  //                     </select>\n  //                 </div>\n  //             </div>\n  //         );\n  //     } else if (formData.actionType === \"Change_Stage\") {\n  //         return (\n  //             <div>\n  //                 {/* Stage Change specific options */}\n  //                 <div className=\"form-group\">\n  //                     <label>Next Stage</label>\n  //                     <select\n  //                         className=\"form-control\"\n  //                         name=\"action\"\n  //                         value={formData.action}\n  //                         onChange={handleInputChange}\n  //                     >\n  //                         <option key=\"Any\" value=\"Any\">\n  //                             Any\n  //                         </option>\n  //                         {stageList?.map((stage) => (\n  //                             <option key={stage.stageId} value={stage.stageName}>\n  //                                 {stage.stageName}\n  //                             </option>\n  //                         ))}\n  //                     </select>\n  //                 </div>\n  //                 {/* ... add more fields */}\n  //             </div>\n  //         );\n  //     }\n  //     return null; // Return null if no matching trigger type\n  // };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: handleClose,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Rules\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Trigger Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-control\",\n              name: \"triggerType\"\n              // value={formData.triggerType}\n              // onChange={handleInputChange}\n              ,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Status_Change\",\n                children: \"Status Change\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Stage_Change\",\n                children: \"Stage Change\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Due_Date_Approcharging\",\n                children: \"Due_Date_Approcharging\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Task_OverDue\",\n                children: \"Task_OverDue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 29\n            }, this), renderTriggerOptions()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Action Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-control\",\n              name: \"actionType\",\n              value: formData.actionType,\n              onChange: handleInputChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Change_Status\",\n                children: \"Status Change\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Change_Stage\",\n                children: \"Stage Change\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 29\n            }, this), renderActionOptions()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: handleClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: handleCreateRule,\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 9\n  }, this);\n};\n_s(AddRule, \"09JRmXpUiWnxFa/MJDCDDMOmM9g=\", false, function () {\n  return [useSelector];\n});\n_c = AddRule;\nexport default AddRule;\nvar _c;\n$RefreshReg$(_c, \"AddRule\");","map":{"version":3,"names":["React","useState","Modal","Button","axios","useSelector","jsxDEV","_jsxDEV","AddRule","show","handleClose","_s","projectById","state","Project","status","stageList","handleCreateRule","post","projectId","then","response","console","log","data","catch","error","onHide","children","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","className","name","value","renderTriggerOptions","formData","actionType","onChange","handleInputChange","renderActionOptions","Footer","variant","onClick","_c","$RefreshReg$"],"sources":["C:/grapplerV2Workflow-aditya-frontend/src/components/Rule/AddRule.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst AddRule = ({ show, handleClose }) => {\r\n\r\n    const { projectById } = useSelector((state) => state.Project);\r\n    const { status } = projectById;\r\n    const { stageList } = projectById;\r\n\r\n    // const [formData, setFormData] = useState({\r\n    //     triggerType: \"Status_Change\",\r\n    //     previousTrigger: \"\",\r\n    //     currentTrigger: \"\",\r\n    //     actionType: \"\",\r\n    //     action: \"\",\r\n    // });\r\n\r\n    // const handleInputChange = (e) => {\r\n    //     const { name, value } = e.target;\r\n    //     setFormData((prevData) => ({\r\n    //         ...prevData,\r\n    //         [name]: value,\r\n    //     }));\r\n    // };\r\n    const handleCreateRule = () => {\r\n        // API call to create rule with formData\r\n        // if (formData.triggerType === \"Due_Date_Approcharging\") {\r\n        //     formData.triggerType = \"Date_Seduled\";\r\n        //     formData.previousTrigger = \"before\";\r\n        // }\r\n        // if (formData.triggerType === \"Task_OverDue\") {\r\n        //     formData.triggerType = \"Date_Seduled\";\r\n        //     formData.previousTrigger = \"after\";\r\n        // }\r\n        // if(formData.actionType === \"Change_Stage\"){\r\n        //     const selectedStage = stageList.find(\r\n        //         (stage) => stage.stageName === formData.action\r\n        //       );\r\n        //     const stageId = selectedStage?.stageId;\r\n        //     formData.action=stageId;\r\n        // }\r\n        \r\n        axios\r\n        .post(\r\n          `http://localhost:8080/projects/${projectById.projectId}/rules`,\r\n        //   formData\r\n        )\r\n        .then((response) => {\r\n          console.log(\"API call successful:\", response.data.data);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error updating data: \", error);\r\n        });\r\n        // setFormData({\r\n        //     triggerType: \"Status_Change\",\r\n        //     previousTrigger: \"\",\r\n        //     currentTrigger: \"\",\r\n        //     actionType: \"\",\r\n        //     action: \"\",\r\n        // });\r\n        handleClose();\r\n    };\r\n\r\n    // const renderTriggerOptions = () => {\r\n    //     if (formData.triggerType === \"Status_Change\") {\r\n    //         return (\r\n    //             <div>\r\n    //                 {/* Status Change specific options */}\r\n    //                 <div className=\"form-group\">\r\n    //                     <label>Previous Status</label>\r\n    //                     <select\r\n    //                         className=\"form-control\"\r\n    //                         name=\"previousTrigger\"\r\n    //                         value={formData.previousTrigger}\r\n    //                         onChange={handleInputChange}\r\n    //                     >\r\n    //                         <option key=\"option\" value=\"option\">\r\n    //                             Any\r\n    //                         </option>\r\n    //                         {status?.map((status) => (\r\n    //                             <option key={status} value={status}>\r\n    //                                 {status}\r\n    //                             </option>\r\n    //                         ))}\r\n\r\n    //                     </select>\r\n    //                     <label>Next Status</label>\r\n    //                     <select\r\n    //                         className=\"form-control\"\r\n    //                         name=\"currentTrigger\"\r\n    //                         value={formData.currentTrigger}\r\n    //                         onChange={handleInputChange}\r\n    //                     >\r\n    //                         <option key=\"option\" value=\"option\">\r\n    //                             Any\r\n    //                         </option>\r\n    //                         {status?.map((status) => (\r\n    //                             <option key={status} value={status}>\r\n    //                                 {status}\r\n    //                             </option>\r\n    //                         ))}\r\n\r\n    //                     </select>\r\n    //                 </div>\r\n    //                 {/* ... add more fields */}\r\n    //             </div>\r\n    //         );\r\n    //     } else if (formData.triggerType === \"Stage_Change\") {\r\n    //         return (\r\n    //             <div>\r\n    //                 {/* Stage Change specific options */}\r\n    //                 <div className=\"form-group\">\r\n    //                     <label>Previous Stage</label>\r\n    //                     <select\r\n    //                         className=\"form-control\"\r\n    //                         name=\"previousTrigger\"\r\n    //                         value={formData.previousTrigger}\r\n    //                         onChange={handleInputChange}\r\n    //                     >\r\n    //                         <option key=\"Any\" value=\"Any\">\r\n    //                             Any\r\n    //                         </option>\r\n    //                         {stageList?.map((stage) => (\r\n    //                             <option key={stage.stageId} value={stage.stageName}>\r\n    //                                 {stage.stageName}\r\n    //                             </option>\r\n    //                         ))}\r\n    //                     </select>\r\n\r\n    //                 </div>\r\n    //                 <div className=\"form-group\">\r\n    //                     <label>Current Stage</label>\r\n    //                     <select\r\n    //                         className=\"form-control\"\r\n    //                         name=\"action\"\r\n    //                         value={formData.action}\r\n    //                         onChange={handleInputChange}\r\n    //                     >\r\n    //                         <option key=\"Any\" value=\"Any\">\r\n    //                             Any\r\n    //                         </option>\r\n    //                         {stageList?.map((stage) => (\r\n    //                             <option key={stage.stageId} value={stage.stageName}>\r\n    //                                 {stage.stageName}\r\n    //                             </option>\r\n    //                         ))}\r\n    //                     </select>\r\n    //                 </div>\r\n    //                 {/* ... add more fields */}\r\n    //             </div>\r\n    //         );\r\n    //     } else if (formData.triggerType === \"Due_Date_Approcharging\") {\r\n    //         return (\r\n    //             <div>\r\n    //                 {/* Due Date Change specific options */}\r\n    //                 <div className=\"form-group\">\r\n    //                     <label>Day before</label>\r\n    //                     <input\r\n    //                         type=\"number\"\r\n    //                         className=\"form-control\"\r\n    //                         name=\"currentTrigger\"\r\n    //                         value={formData.currentTrigger}\r\n    //                         onChange={handleInputChange}\r\n    //                         min=\"1\"\r\n    //                     />\r\n    //                 </div>\r\n    //                 {/* ... add more fields */}\r\n    //             </div>\r\n    //         );\r\n    //     } else if (formData.triggerType === \"Task_OverDue\") {\r\n    //         return (\r\n    //             <div>\r\n    //                 <div className=\"form-group\">\r\n    //                     <label>Day After</label>\r\n    //                     <input\r\n    //                         type=\"number\"\r\n    //                         className=\"form-control\"\r\n    //                         name=\"currentTrigger\"\r\n    //                         value={formData.currentTrigger}\r\n    //                         onChange={handleInputChange}\r\n    //                         min=\"1\"\r\n    //                     />\r\n    //                 </div>\r\n    //             </div>\r\n    //         );\r\n    //     }\r\n    //     return null; // Return null if no matching trigger type\r\n    // };\r\n\r\n    // const renderActionOptions = () => {\r\n    //     if (formData.actionType === \"Change_Status\") {\r\n    //         return (\r\n    //             <div>\r\n    //                 {/* Status Change specific options */}\r\n    //                 <div className=\"form-group\">\r\n    //                     <label>Next Status</label>\r\n    //                     <select\r\n    //                         className=\"form-control\"\r\n    //                         name=\"action\"\r\n    //                         value={formData.action}\r\n    //                         onChange={handleInputChange}\r\n    //                     >\r\n    //                         <option key=\"option\" value=\"option\">\r\n    //                             Any\r\n    //                         </option>\r\n    //                         {status?.map((status) => (\r\n    //                             <option key={status} value={status}>\r\n    //                                 {status}\r\n    //                             </option>\r\n    //                         ))}\r\n\r\n    //                     </select>\r\n    //                 </div>\r\n    //             </div>\r\n    //         );\r\n    //     } else if (formData.actionType === \"Change_Stage\") {\r\n    //         return (\r\n    //             <div>\r\n    //                 {/* Stage Change specific options */}\r\n    //                 <div className=\"form-group\">\r\n    //                     <label>Next Stage</label>\r\n    //                     <select\r\n    //                         className=\"form-control\"\r\n    //                         name=\"action\"\r\n    //                         value={formData.action}\r\n    //                         onChange={handleInputChange}\r\n    //                     >\r\n    //                         <option key=\"Any\" value=\"Any\">\r\n    //                             Any\r\n    //                         </option>\r\n    //                         {stageList?.map((stage) => (\r\n    //                             <option key={stage.stageId} value={stage.stageName}>\r\n    //                                 {stage.stageName}\r\n    //                             </option>\r\n    //                         ))}\r\n    //                     </select>\r\n    //                 </div>\r\n    //                 {/* ... add more fields */}\r\n    //             </div>\r\n    //         );\r\n    //     }\r\n    //     return null; // Return null if no matching trigger type\r\n    // };\r\n\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Rules</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"form-group\">\r\n                            <label>Trigger Type</label>\r\n                            <select\r\n                                className=\"form-control\"\r\n                                name=\"triggerType\"\r\n                                // value={formData.triggerType}\r\n                                // onChange={handleInputChange}\r\n                            >\r\n                                <option value=\"Status_Change\">Status Change</option>\r\n                                <option value=\"Stage_Change\">Stage Change</option>\r\n                                <option value=\"Due_Date_Approcharging\">Due_Date_Approcharging</option>\r\n                                <option value=\"Task_OverDue\">Task_OverDue</option>\r\n                            </select>\r\n                            {renderTriggerOptions()}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"form-group\">\r\n                            <label>Action Type</label>\r\n                            <select\r\n                                className=\"form-control\"\r\n                                name=\"actionType\"\r\n                                value={formData.actionType}\r\n                                onChange={handleInputChange}\r\n                            >\r\n                                <option value=\"Change_Status\">Status Change</option>\r\n                                <option value=\"Change_Stage\">Stage Change</option>\r\n                            </select>\r\n                            {renderActionOptions()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={handleCreateRule}>\r\n                    Create\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddRule;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,OAAO,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAEvC,MAAM;IAAEC;EAAY,CAAC,GAAGP,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACC,OAAO,CAAC;EAC7D,MAAM;IAAEC;EAAO,CAAC,GAAGH,WAAW;EAC9B,MAAM;IAAEI;EAAU,CAAC,GAAGJ,WAAW;;EAEjC;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMK,gBAAgB,GAAGA,CAAA,KAAM;IAC3B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEAb,KAAK,CACJc,IAAI,CACF,kCAAiCN,WAAW,CAACO,SAAU;IAC1D;IACA,CAAC,CACAC,IAAI,CAAEC,QAAQ,IAAK;MAClBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC;IACzD,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACAhB,WAAW,CAAC,CAAC;EACjB,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAIA,oBACIH,OAAA,CAACL,KAAK;IAACO,IAAI,EAAEA,IAAK;IAACkB,MAAM,EAAEjB,WAAY;IAAAkB,QAAA,gBACnCrB,OAAA,CAACL,KAAK,CAAC2B,MAAM;MAACC,WAAW;MAAAF,QAAA,eACrBrB,OAAA,CAACL,KAAK,CAAC6B,KAAK;QAAAH,QAAA,EAAC;MAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,eACf5B,OAAA,CAACL,KAAK,CAACkC,IAAI;MAAAR,QAAA,eACPrB,OAAA;QAAK8B,SAAS,EAAC,KAAK;QAAAT,QAAA,gBAChBrB,OAAA;UAAK8B,SAAS,EAAC,UAAU;UAAAT,QAAA,eACrBrB,OAAA;YAAK8B,SAAS,EAAC,YAAY;YAAAT,QAAA,gBACvBrB,OAAA;cAAAqB,QAAA,EAAO;YAAY;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}