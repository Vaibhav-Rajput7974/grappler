{"ast":null,"code":"import { createSlice, current } from \"@reduxjs/toolkit\";\nimport { act } from \"react-dom/test-utils\";\nconst intialize = {\n  projects: [],\n  projectById: {\n    stageList: [] // Add this property  \n  }\n};\n\nconst ProjectSlice = createSlice({\n  name: \"ProjectSlicer\",\n  initialState: intialize,\n  reducers: {\n    getAllProject: (state, action) => {\n      state.projects = action.payload;\n    },\n    getProjectById: (state, action) => {\n      state.projectById = action.payload;\n    },\n    createProject: (state, action) => {\n      state.projects.push(action.payload);\n    },\n    addStage: (state, action) => {\n      const {\n        index,\n        data\n      } = action.payload;\n      state.projectById.stageList.push(data);\n    },\n    updateSliceStage(state, action) {\n      const {\n        index,\n        updateStage\n      } = action.payload;\n      state.projectById.stageList[index] = {\n        ...updateStage,\n        id: state.projectById.stageList[index].stageId\n      };\n    },\n    addSliceTicket(state, action) {\n      state.projectById.stageId.push(action.payload);\n    },\n    deleteStage: (state, action) => {\n      const stageIndex = action.payload;\n      console.log(stageIndex);\n      if (stageIndex !== -1) {\n        state.projectById.stageList.splice(stageIndex, 1);\n      }\n    },\n    updateSliceTicket: (state, action) => {\n      const {\n        previous,\n        current\n      } = action.payload;\n    },\n    updateSliceTicket: (state, action) => {\n      const {\n        previous,\n        data\n      } = action.payload;\n      if (previous !== data.stageId) {}\n      // Find the index of the previous and new stages\n      const previousStageIndex = state.projectById.stageList.findIndex(stage => stage.stageId === previous);\n      const newStageIndex = state.projectById.stageList.findIndex(stage => stage.stageId === data.stageId);\n\n      // Find the index of the ticket in the previous stage\n      const ticketIndex = state.projectById.stageList[previousStageIndex].ticketList.findIndex(ticket => ticket.ticketId === data.ticketId);\n      if (ticketIndex !== -1) {\n        // Remove the ticket from the previous stage\n        const [movedTicket] = state.projectById.stageList[previousStageIndex].ticketList.splice(ticketIndex, 1);\n\n        // Add the ticket to the new stage\n        state.projectById.stageList[newStageIndex].ticketList.push(movedTicket);\n      }\n    },\n    addTicketToStage: (state, action) => {\n      const {\n        stageIndex,\n        ticketData\n      } = action.payload;\n      console.log(action.payload);\n      // state.projectById.stageList[stageIndex].tickets.push(ticketData);\n    }\n  }\n});\n\nexport const {\n  getAllProject,\n  getProjectById,\n  createProject,\n  addStage,\n  deleteStage,\n  updateSliceStage,\n  updateSliceTicket,\n  updateStageOrder,\n  addTicketToStage\n} = ProjectSlice.actions;\nexport default ProjectSlice.reducer;","map":{"version":3,"names":["createSlice","current","act","intialize","projects","projectById","stageList","ProjectSlice","name","initialState","reducers","getAllProject","state","action","payload","getProjectById","createProject","push","addStage","index","data","updateSliceStage","updateStage","id","stageId","addSliceTicket","deleteStage","stageIndex","console","log","splice","updateSliceTicket","previous","previousStageIndex","findIndex","stage","newStageIndex","ticketIndex","ticketList","ticket","ticketId","movedTicket","addTicketToStage","ticketData","updateStageOrder","actions","reducer"],"sources":["C:/grapplerV2Workflow-aditya-frontend/src/slice/ProjectSlice.js"],"sourcesContent":["import { createSlice, current } from \"@reduxjs/toolkit\";\nimport { act } from \"react-dom/test-utils\";\nconst intialize = {\n  projects: [],\n  projectById: {\n    stageList: [], // Add this property  \n  },\n};\n\nconst ProjectSlice = createSlice({\n  name: \"ProjectSlicer\",\n  initialState: intialize,\n  reducers: {\n    getAllProject: (state, action) => {\n      state.projects = action.payload;\n    },\n    getProjectById: (state, action) => {\n      state.projectById = action.payload;\n    },\n    createProject: (state, action) => {\n      state.projects.push(action.payload);\n    },\n    addStage: (state, action) => {\n      const { index, data } = action.payload;\n      state.projectById.stageList.push(data);\n    },\n    updateSliceStage(state, action) {\n      const { index, updateStage } = action.payload;\n      state.projectById.stageList[index] = {\n        ...updateStage,\n        id: state.projectById.stageList[index].stageId,\n      };\n    },\n    addSliceTicket(state, action) {\n      state.projectById.stageId.push(action.payload);\n    },\n    deleteStage: (state, action) => {\n      const stageIndex = action.payload;\n      console.log(stageIndex);\n      if (stageIndex !== -1) {\n        state.projectById.stageList.splice(stageIndex, 1);\n      }\n    },\n    updateSliceTicket: (state, action) => {\n      const { previous, current } = action.payload;\n    },\n    updateSliceTicket: (state, action) => {\n      const { previous, data } = action.payload;\nif(previous !== data.stageId){}\n      // Find the index of the previous and new stages\n      const previousStageIndex = state.projectById.stageList.findIndex(stage => stage.stageId === previous);\n      const newStageIndex = state.projectById.stageList.findIndex(stage => stage.stageId === data.stageId);\n\n      // Find the index of the ticket in the previous stage\n      const ticketIndex = state.projectById.stageList[previousStageIndex].ticketList.findIndex(ticket => ticket.ticketId === data.ticketId);\n\n      if (ticketIndex !== -1) {\n        // Remove the ticket from the previous stage\n        const [movedTicket] = state.projectById.stageList[previousStageIndex].ticketList.splice(ticketIndex, 1);\n        \n        // Add the ticket to the new stage\n        state.projectById.stageList[newStageIndex].ticketList.push(movedTicket);\n      }\n    },\n    addTicketToStage: (state, action) => {\n        const { stageIndex, ticketData } = action.payload;\n        console.log(action.payload);\n        // state.projectById.stageList[stageIndex].tickets.push(ticketData);\n      },\n  },\n});\nexport const {\n  getAllProject,\n  getProjectById,\n  createProject,\n  addStage,\n  deleteStage,\n  updateSliceStage,\n  updateSliceTicket,\n  updateStageOrder,\n  addTicketToStage,\n} = ProjectSlice.actions;\nexport default ProjectSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}