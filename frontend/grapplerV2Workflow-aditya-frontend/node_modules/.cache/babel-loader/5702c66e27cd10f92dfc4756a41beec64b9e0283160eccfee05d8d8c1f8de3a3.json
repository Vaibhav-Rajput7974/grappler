{"ast":null,"code":"// WebSocketService.js\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from 'stompjs/lib/stomp';\nlet stompClient = null;\nexport const connect = () => {\n  let Sock = new SockJS('http://localhost:8080/ws');\n  stompClient = over(Sock);\n  stompClient.connect({}, onConnected, onError);\n};\nconst onConnected = () => {\n  log;\n};\nconst onError = err => {\n  console.log(err);\n};\n// export const connect = () => {\n//     const socket = new WebSocket('ws://localhost:8080/websocket-endpoint'); // Replace with your WebSocket endpoint\n//     stompClient = new Client({\n//         webSocketFactory: () => socket,\n//         reconnectDelay: 5000,\n//         heartbeatIncoming: 4000,\n//         heartbeatOutgoing: 4000,\n//     });\n\n//     stompClient.onConnect = () => {\n//         console.log('Connected to WebSocket');\n//     };\n\n//     stompClient.onDisconnect = () => {\n//         console.log('Disconnected from WebSocket');\n//     };\n\n//     stompClient.activate();\n// };\n\n// export const disconnect = () => {\n//     if (stompClient !== null) {\n//         stompClient.deactivate();\n//     }\n// };\n\n// export const sendMessage = (message) => {\n//     if (stompClient && stompClient.connected) {\n//         stompClient.publish({\n//             destination: '/app/sendMessage',\n//             body: JSON.stringify({ message }),\n//         });\n//     } else {\n//         console.error('WebSocket is not connected. Cannot send message.');\n//     }\n// };\n\n// export const subscribeToMessages = (callback) => {\n//     if (stompClient && stompClient.connected) {\n//         stompClient.subscribe('/topic/messages', (response) => {\n//             const message = JSON.parse(response.body);\n//             callback(message);\n//         });\n//     } else {\n//         console.error('WebSocket is not connected. Cannot subscribe to messages. Will try again after connection is established.');\n//     }\n// };","map":{"version":3,"names":["Client","SockJS","Stomp","stompClient","connect","Sock","over","onConnected","onError","log","err","console"],"sources":["C:/grapplerV2Workflow-aditya-frontend/src/Api/WebSocketService.js"],"sourcesContent":["// WebSocketService.js\r\nimport { Client } from '@stomp/stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from 'stompjs/lib/stomp';\r\n\r\nlet stompClient = null;\r\n\r\nexport const connect =()=>{\r\n    let Sock = new SockJS('http://localhost:8080/ws');\r\n    stompClient = over(Sock);\r\n    stompClient.connect({},onConnected, onError);\r\n}\r\n\r\nconst onConnected = () => {\r\n    log\r\n}\r\nconst onError = (err) => {\r\n    console.log(err);\r\n    \r\n}\r\n// export const connect = () => {\r\n//     const socket = new WebSocket('ws://localhost:8080/websocket-endpoint'); // Replace with your WebSocket endpoint\r\n//     stompClient = new Client({\r\n//         webSocketFactory: () => socket,\r\n//         reconnectDelay: 5000,\r\n//         heartbeatIncoming: 4000,\r\n//         heartbeatOutgoing: 4000,\r\n//     });\r\n\r\n//     stompClient.onConnect = () => {\r\n//         console.log('Connected to WebSocket');\r\n//     };\r\n\r\n//     stompClient.onDisconnect = () => {\r\n//         console.log('Disconnected from WebSocket');\r\n//     };\r\n\r\n//     stompClient.activate();\r\n// };\r\n\r\n// export const disconnect = () => {\r\n//     if (stompClient !== null) {\r\n//         stompClient.deactivate();\r\n//     }\r\n// };\r\n\r\n// export const sendMessage = (message) => {\r\n//     if (stompClient && stompClient.connected) {\r\n//         stompClient.publish({\r\n//             destination: '/app/sendMessage',\r\n//             body: JSON.stringify({ message }),\r\n//         });\r\n//     } else {\r\n//         console.error('WebSocket is not connected. Cannot send message.');\r\n//     }\r\n// };\r\n\r\n// export const subscribeToMessages = (callback) => {\r\n//     if (stompClient && stompClient.connected) {\r\n//         stompClient.subscribe('/topic/messages', (response) => {\r\n//             const message = JSON.parse(response.body);\r\n//             callback(message);\r\n//         });\r\n//     } else {\r\n//         console.error('WebSocket is not connected. Cannot subscribe to messages. Will try again after connection is established.');\r\n//     }\r\n// };\r\n"],"mappings":"AAAA;AACA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,KAAK,QAAQ,mBAAmB;AAEzC,IAAIC,WAAW,GAAG,IAAI;AAEtB,OAAO,MAAMC,OAAO,GAAEA,CAAA,KAAI;EACtB,IAAIC,IAAI,GAAG,IAAIJ,MAAM,CAAC,0BAA0B,CAAC;EACjDE,WAAW,GAAGG,IAAI,CAACD,IAAI,CAAC;EACxBF,WAAW,CAACC,OAAO,CAAC,CAAC,CAAC,EAACG,WAAW,EAAEC,OAAO,CAAC;AAChD,CAAC;AAED,MAAMD,WAAW,GAAGA,CAAA,KAAM;EACtBE,GAAG;AACP,CAAC;AACD,MAAMD,OAAO,GAAIE,GAAG,IAAK;EACrBC,OAAO,CAACF,GAAG,CAACC,GAAG,CAAC;AAEpB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}