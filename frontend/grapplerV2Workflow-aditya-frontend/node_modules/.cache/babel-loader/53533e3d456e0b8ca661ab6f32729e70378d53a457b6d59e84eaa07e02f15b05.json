{"ast":null,"code":"var _s = $RefreshSig$();\n// // WebSocketService.js\n\n// import React, { useEffect } from 'react';\n// import { Client } from '@stomp/stompjs';\n\n// const WebSocketComponent = () => {\n//   useEffect(() => {\n//     const socket = new WebSocket('wss://localhost:8080/ws'); // Replace with your WebSocket endpoint\n\n//     // Create a Stomp client over the WebSocket\n//     const stompClient = new Client({\n//       webSocketFactory: () => socket,\n//       reconnectDelay: 5000,\n//       heartbeatIncoming: 4000,\n//       heartbeatOutgoing: 4000,\n//     });\n\n//     // Activate the Stomp client\n//     stompClient.activate();\n//     stompClient.onConnect = () => {\n//         console.log('Connected to WebSocket');\n//         // Now, it's safe to perform actions like subscribing to topics.\n//     };\n\n//     // Subscribe to a topic\n//     // const subscription = stompClient.subscribe('/topic/messages', (response) => {\n//     //   const message = JSON.parse(response.body);\n//     //   console.log('Received message:', message);\n//     // });\n\n//     // Clean up the subscription and WebSocket connection on component unmount\n//     return () => {\n//     //   subscription.unsubscribe();\n//     //   stompClient.deactivate();\n//     };\n//   }, []); // Empty dependency array ensures that this effect runs only once on mount\n\n//   return (\n//     <div>\n//       <h1>WebSocket Connection</h1>\n//       <p>Check the console for received messages.</p>\n//     </div>\n//   );\n// };\n\n// export default WebSocketComponent;\n\n// // export const connect = () => {\n// //     const socket = new WebSocket('ws://localhost:8080/websocket-endpoint'); // Replace with your WebSocket endpoint\n// //     stompClient = new Client({\n// //         webSocketFactory: () => socket,\n// //         reconnectDelay: 5000,\n// //         heartbeatIncoming: 4000,\n// //         heartbeatOutgoing: 4000,\n// //     });\n\n// //     stompClient.onConnect = () => {\n// //         console.log('Connected to WebSocket');\n// //     };\n\n// //     stompClient.onDisconnect = () => {\n// //         console.log('Disconnected from WebSocket');\n// //     };\n\n// //     stompClient.activate();\n// // };\n\n// // export const disconnect = () => {\n// //     if (stompClient !== null) {\n// //         stompClient.deactivate();\n// //     }\n// // };\n\n// // export const sendMessage = (message) => {\n// //     if (stompClient && stompClient.connected) {\n// //         stompClient.publish({\n// //             destination: '/app/sendMessage',\n// //             body: JSON.stringify({ message }),\n// //         });\n// //     } else {\n// //         console.error('WebSocket is not connected. Cannot send message.');\n// //     }\n// // };\n\n// // export const subscribeToMessages = (callback) => {\n// //     if (stompClient && stompClient.connected) {\n// //         stompClient.subscribe('/topic/messages', (response) => {\n// //             const message = JSON.parse(response.body);\n// //             callback(message);\n// //         });\n// //     } else {\n// //         console.error('WebSocket is not connected. Cannot subscribe to messages. Will try again after connection is established.');\n// //     }\n// // };\nimport React, { useState, useEffect } from 'react';\nconst ChatComponent = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    const newSocket = new WebSocket('ws://localhost:8080/ws');\n    newSocket.onopen = () => {\n      console.log('WebSocket connection opened');\n    };\n    newSocket.onmessage = event => {\n      const receivedMessage = JSON.parse(event.data);\n      console.log('Received message:', receivedMessage);\n      // Handle the received message as needed\n    };\n\n    newSocket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n    setSocket(newSocket);\n\n    // Clean up the WebSocket connection on component unmount\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n};\n_s(ChatComponent, \"ZIT5GSQSmcnBdqGaG/31mZp5qLk=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","ChatComponent","_s","message","setMessage","socket","setSocket","newSocket","WebSocket","onopen","console","log","onmessage","event","receivedMessage","JSON","parse","data","onclose","close","_c","$RefreshReg$"],"sources":["C:/grapplerV2Workflow-aditya-frontend/src/Api/WebSocketService.js"],"sourcesContent":["// // WebSocketService.js\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { Client } from '@stomp/stompjs';\r\n\r\n// const WebSocketComponent = () => {\r\n//   useEffect(() => {\r\n//     const socket = new WebSocket('wss://localhost:8080/ws'); // Replace with your WebSocket endpoint\r\n\r\n//     // Create a Stomp client over the WebSocket\r\n//     const stompClient = new Client({\r\n//       webSocketFactory: () => socket,\r\n//       reconnectDelay: 5000,\r\n//       heartbeatIncoming: 4000,\r\n//       heartbeatOutgoing: 4000,\r\n//     });\r\n\r\n//     // Activate the Stomp client\r\n//     stompClient.activate();\r\n//     stompClient.onConnect = () => {\r\n//         console.log('Connected to WebSocket');\r\n//         // Now, it's safe to perform actions like subscribing to topics.\r\n//     };\r\n\r\n//     // Subscribe to a topic\r\n//     // const subscription = stompClient.subscribe('/topic/messages', (response) => {\r\n//     //   const message = JSON.parse(response.body);\r\n//     //   console.log('Received message:', message);\r\n//     // });\r\n\r\n//     // Clean up the subscription and WebSocket connection on component unmount\r\n//     return () => {\r\n//     //   subscription.unsubscribe();\r\n//     //   stompClient.deactivate();\r\n//     };\r\n//   }, []); // Empty dependency array ensures that this effect runs only once on mount\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>WebSocket Connection</h1>\r\n//       <p>Check the console for received messages.</p>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default WebSocketComponent;\r\n\r\n// // export const connect = () => {\r\n// //     const socket = new WebSocket('ws://localhost:8080/websocket-endpoint'); // Replace with your WebSocket endpoint\r\n// //     stompClient = new Client({\r\n// //         webSocketFactory: () => socket,\r\n// //         reconnectDelay: 5000,\r\n// //         heartbeatIncoming: 4000,\r\n// //         heartbeatOutgoing: 4000,\r\n// //     });\r\n\r\n// //     stompClient.onConnect = () => {\r\n// //         console.log('Connected to WebSocket');\r\n// //     };\r\n\r\n// //     stompClient.onDisconnect = () => {\r\n// //         console.log('Disconnected from WebSocket');\r\n// //     };\r\n\r\n// //     stompClient.activate();\r\n// // };\r\n\r\n// // export const disconnect = () => {\r\n// //     if (stompClient !== null) {\r\n// //         stompClient.deactivate();\r\n// //     }\r\n// // };\r\n\r\n// // export const sendMessage = (message) => {\r\n// //     if (stompClient && stompClient.connected) {\r\n// //         stompClient.publish({\r\n// //             destination: '/app/sendMessage',\r\n// //             body: JSON.stringify({ message }),\r\n// //         });\r\n// //     } else {\r\n// //         console.error('WebSocket is not connected. Cannot send message.');\r\n// //     }\r\n// // };\r\n\r\n// // export const subscribeToMessages = (callback) => {\r\n// //     if (stompClient && stompClient.connected) {\r\n// //         stompClient.subscribe('/topic/messages', (response) => {\r\n// //             const message = JSON.parse(response.body);\r\n// //             callback(message);\r\n// //         });\r\n// //     } else {\r\n// //         console.error('WebSocket is not connected. Cannot subscribe to messages. Will try again after connection is established.');\r\n// //     }\r\n// // };\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst ChatComponent = () => {\r\n    const [message, setMessage] = useState('');\r\n    const [socket, setSocket] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const newSocket = new WebSocket('ws://localhost:8080/ws');\r\n\r\n        newSocket.onopen = () => {\r\n            console.log('WebSocket connection opened');\r\n        };\r\n\r\n        newSocket.onmessage = (event) => {\r\n            const receivedMessage = JSON.parse(event.data);\r\n            console.log('Received message:', receivedMessage);\r\n            // Handle the received message as needed\r\n        };\r\n\r\n        newSocket.onclose = () => {\r\n            console.log('WebSocket connection closed');\r\n        };\r\n\r\n        setSocket(newSocket);\r\n\r\n        // Clean up the WebSocket connection on component unmount\r\n        return () => {\r\n            newSocket.close();\r\n        };\r\n    }, []);\r\n\r\n  }\r\n  export default ChatComponent;"],"mappings":";AAAA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACM,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACZ,MAAMO,SAAS,GAAG,IAAIC,SAAS,CAAC,wBAAwB,CAAC;IAEzDD,SAAS,CAACE,MAAM,GAAG,MAAM;MACrBC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC9C,CAAC;IAEDJ,SAAS,CAACK,SAAS,GAAIC,KAAK,IAAK;MAC7B,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;MAC9CP,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEG,eAAe,CAAC;MACjD;IACJ,CAAC;;IAEDP,SAAS,CAACW,OAAO,GAAG,MAAM;MACtBR,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC9C,CAAC;IAEDL,SAAS,CAACC,SAAS,CAAC;;IAEpB;IACA,OAAO,MAAM;MACTA,SAAS,CAACY,KAAK,CAAC,CAAC;IACrB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;AAER,CAAC;AAAAjB,EAAA,CA7BGD,aAAa;AAAAmB,EAAA,GAAbnB,aAAa;AA8BjB,eAAeA,aAAa;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}