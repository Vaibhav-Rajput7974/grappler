{"ast":null,"code":"// WebSocketService.js\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nlet stompClient = null;\nconst WebService = () => {\n  let socket = new SockJS(\"/websocket-endpoint\");\n};\n\n// export const connect = () => {\n//     const socket = new WebSocket('ws://localhost:8080/websocket-endpoint'); // Replace with your WebSocket endpoint\n//     stompClient = new Client({\n//         webSocketFactory: () => socket,\n//         reconnectDelay: 5000,\n//         heartbeatIncoming: 4000,\n//         heartbeatOutgoing: 4000,\n//     });\n\n//     stompClient.onConnect = () => {\n//         console.log('Connected to WebSocket');\n//     };\n\n//     stompClient.onDisconnect = () => {\n//         console.log('Disconnected from WebSocket');\n//     };\n\n//     stompClient.activate();\n// };\n\n// export const disconnect = () => {\n//     if (stompClient !== null) {\n//         stompClient.deactivate();\n//     }\n// };\n\n// export const sendMessage = (message) => {\n//     if (stompClient && stompClient.connected) {\n//         stompClient.publish({\n//             destination: '/app/sendMessage',\n//             body: JSON.stringify({ message }),\n//         });\n//     } else {\n//         console.error('WebSocket is not connected. Cannot send message.');\n//     }\n// };\n\n// export const subscribeToMessages = (callback) => {\n//     if (stompClient && stompClient.connected) {\n//         stompClient.subscribe('/topic/messages', (response) => {\n//             const message = JSON.parse(response.body);\n//             callback(message);\n//         });\n//     } else {\n//         console.error('WebSocket is not connected. Cannot subscribe to messages. Will try again after connection is established.');\n//     }\n// };\n_c = WebService;\nvar _c;\n$RefreshReg$(_c, \"WebService\");","map":{"version":3,"names":["Client","SockJS","stompClient","WebService","socket","_c","$RefreshReg$"],"sources":["C:/grapplerV2Workflow-aditya-frontend/src/Api/WebSocketService.js"],"sourcesContent":["// WebSocketService.js\r\nimport { Client } from '@stomp/stompjs';\r\nimport SockJS from 'sockjs-client';\r\n\r\nlet stompClient = null;\r\n\r\nconst WebService=()=>{\r\n    let socket = new SockJS(\"/websocket-endpoint\");\r\n}\r\n\r\n// export const connect = () => {\r\n//     const socket = new WebSocket('ws://localhost:8080/websocket-endpoint'); // Replace with your WebSocket endpoint\r\n//     stompClient = new Client({\r\n//         webSocketFactory: () => socket,\r\n//         reconnectDelay: 5000,\r\n//         heartbeatIncoming: 4000,\r\n//         heartbeatOutgoing: 4000,\r\n//     });\r\n\r\n//     stompClient.onConnect = () => {\r\n//         console.log('Connected to WebSocket');\r\n//     };\r\n\r\n//     stompClient.onDisconnect = () => {\r\n//         console.log('Disconnected from WebSocket');\r\n//     };\r\n\r\n//     stompClient.activate();\r\n// };\r\n\r\n// export const disconnect = () => {\r\n//     if (stompClient !== null) {\r\n//         stompClient.deactivate();\r\n//     }\r\n// };\r\n\r\n// export const sendMessage = (message) => {\r\n//     if (stompClient && stompClient.connected) {\r\n//         stompClient.publish({\r\n//             destination: '/app/sendMessage',\r\n//             body: JSON.stringify({ message }),\r\n//         });\r\n//     } else {\r\n//         console.error('WebSocket is not connected. Cannot send message.');\r\n//     }\r\n// };\r\n\r\n// export const subscribeToMessages = (callback) => {\r\n//     if (stompClient && stompClient.connected) {\r\n//         stompClient.subscribe('/topic/messages', (response) => {\r\n//             const message = JSON.parse(response.body);\r\n//             callback(message);\r\n//         });\r\n//     } else {\r\n//         console.error('WebSocket is not connected. Cannot subscribe to messages. Will try again after connection is established.');\r\n//     }\r\n// };\r\n"],"mappings":"AAAA;AACA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,MAAM,MAAM,eAAe;AAElC,IAAIC,WAAW,GAAG,IAAI;AAEtB,MAAMC,UAAU,GAACA,CAAA,KAAI;EACjB,IAAIC,MAAM,GAAG,IAAIH,MAAM,CAAC,qBAAqB,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAI,EAAA,GAlDMF,UAAU;AAAA,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}