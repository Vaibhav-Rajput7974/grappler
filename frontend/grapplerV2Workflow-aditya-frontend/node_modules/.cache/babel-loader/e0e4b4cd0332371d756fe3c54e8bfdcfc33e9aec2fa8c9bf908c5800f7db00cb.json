{"ast":null,"code":"var _jsxFileName = \"C:\\\\grapplerV2Workflow-aditya-frontend\\\\src\\\\Api\\\\WebSocketService.js\",\n  _s = $RefreshSig$();\n// WebSocketService.js\n\nimport React, { useEffect } from 'react';\nimport { Client } from '@stomp/stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketComponent = () => {\n  _s();\n  useEffect(() => {\n    const socket = new WebSocket('ws://localhost:8080/ws'); // Replace with your WebSocket endpoint\n\n    // Create a Stomp client over the WebSocket\n    const stompClient = new Client({\n      webSocketFactory: () => socket,\n      reconnectDelay: 5000,\n      heartbeatIncoming: 4000,\n      heartbeatOutgoing: 4000\n    });\n\n    // Activate the Stomp client\n    stompClient.activate();\n    stompClient.onConnect = () => {\n      console.log('Connected to WebSocket');\n      // Now, it's safe to perform actions like subscribing to topics.\n    };\n\n    // Subscribe to a topic\n    // const subscription = stompClient.subscribe('/topic/messages', (response) => {\n    //   const message = JSON.parse(response.body);\n    //   console.log('Received message:', message);\n    // });\n\n    // Clean up the subscription and WebSocket connection on component unmount\n    return () => {\n      //   subscription.unsubscribe();\n      //   stompClient.deactivate();\n    };\n  }, []); // Empty dependency array ensures that this effect runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"WebSocket Connection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Check the console for received messages.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(WebSocketComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = WebSocketComponent;\nexport default WebSocketComponent;\n\n// export const connect = () => {\n//     const socket = new WebSocket('ws://localhost:8080/websocket-endpoint'); // Replace with your WebSocket endpoint\n//     stompClient = new Client({\n//         webSocketFactory: () => socket,\n//         reconnectDelay: 5000,\n//         heartbeatIncoming: 4000,\n//         heartbeatOutgoing: 4000,\n//     });\n\n//     stompClient.onConnect = () => {\n//         console.log('Connected to WebSocket');\n//     };\n\n//     stompClient.onDisconnect = () => {\n//         console.log('Disconnected from WebSocket');\n//     };\n\n//     stompClient.activate();\n// };\n\n// export const disconnect = () => {\n//     if (stompClient !== null) {\n//         stompClient.deactivate();\n//     }\n// };\n\n// export const sendMessage = (message) => {\n//     if (stompClient && stompClient.connected) {\n//         stompClient.publish({\n//             destination: '/app/sendMessage',\n//             body: JSON.stringify({ message }),\n//         });\n//     } else {\n//         console.error('WebSocket is not connected. Cannot send message.');\n//     }\n// };\n\n// export const subscribeToMessages = (callback) => {\n//     if (stompClient && stompClient.connected) {\n//         stompClient.subscribe('/topic/messages', (response) => {\n//             const message = JSON.parse(response.body);\n//             callback(message);\n//         });\n//     } else {\n//         console.error('WebSocket is not connected. Cannot subscribe to messages. Will try again after connection is established.');\n//     }\n// };\nvar _c;\n$RefreshReg$(_c, \"WebSocketComponent\");","map":{"version":3,"names":["React","useEffect","Client","jsxDEV","_jsxDEV","WebSocketComponent","_s","socket","WebSocket","stompClient","webSocketFactory","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","activate","onConnect","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/grapplerV2Workflow-aditya-frontend/src/Api/WebSocketService.js"],"sourcesContent":["// WebSocketService.js\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { Client } from '@stomp/stompjs';\r\n\r\nconst WebSocketComponent = () => {\r\n  useEffect(() => {\r\n    const socket = new WebSocket('ws://localhost:8080/ws'); // Replace with your WebSocket endpoint\r\n\r\n    // Create a Stomp client over the WebSocket\r\n    const stompClient = new Client({\r\n      webSocketFactory: () => socket,\r\n      reconnectDelay: 5000,\r\n      heartbeatIncoming: 4000,\r\n      heartbeatOutgoing: 4000,\r\n    });\r\n\r\n    // Activate the Stomp client\r\n    stompClient.activate();\r\n    stompClient.onConnect = () => {\r\n        console.log('Connected to WebSocket');\r\n        // Now, it's safe to perform actions like subscribing to topics.\r\n    };\r\n\r\n    // Subscribe to a topic\r\n    // const subscription = stompClient.subscribe('/topic/messages', (response) => {\r\n    //   const message = JSON.parse(response.body);\r\n    //   console.log('Received message:', message);\r\n    // });\r\n\r\n    // Clean up the subscription and WebSocket connection on component unmount\r\n    return () => {\r\n    //   subscription.unsubscribe();\r\n    //   stompClient.deactivate();\r\n    };\r\n  }, []); // Empty dependency array ensures that this effect runs only once on mount\r\n\r\n  return (\r\n    <div>\r\n      <h1>WebSocket Connection</h1>\r\n      <p>Check the console for received messages.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WebSocketComponent;\r\n\r\n// export const connect = () => {\r\n//     const socket = new WebSocket('ws://localhost:8080/websocket-endpoint'); // Replace with your WebSocket endpoint\r\n//     stompClient = new Client({\r\n//         webSocketFactory: () => socket,\r\n//         reconnectDelay: 5000,\r\n//         heartbeatIncoming: 4000,\r\n//         heartbeatOutgoing: 4000,\r\n//     });\r\n\r\n//     stompClient.onConnect = () => {\r\n//         console.log('Connected to WebSocket');\r\n//     };\r\n\r\n//     stompClient.onDisconnect = () => {\r\n//         console.log('Disconnected from WebSocket');\r\n//     };\r\n\r\n//     stompClient.activate();\r\n// };\r\n\r\n// export const disconnect = () => {\r\n//     if (stompClient !== null) {\r\n//         stompClient.deactivate();\r\n//     }\r\n// };\r\n\r\n// export const sendMessage = (message) => {\r\n//     if (stompClient && stompClient.connected) {\r\n//         stompClient.publish({\r\n//             destination: '/app/sendMessage',\r\n//             body: JSON.stringify({ message }),\r\n//         });\r\n//     } else {\r\n//         console.error('WebSocket is not connected. Cannot send message.');\r\n//     }\r\n// };\r\n\r\n// export const subscribeToMessages = (callback) => {\r\n//     if (stompClient && stompClient.connected) {\r\n//         stompClient.subscribe('/topic/messages', (response) => {\r\n//             const message = JSON.parse(response.body);\r\n//             callback(message);\r\n//         });\r\n//     } else {\r\n//         console.error('WebSocket is not connected. Cannot subscribe to messages. Will try again after connection is established.');\r\n//     }\r\n// };\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,MAAM,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/BL,SAAS,CAAC,MAAM;IACd,MAAMM,MAAM,GAAG,IAAIC,SAAS,CAAC,wBAAwB,CAAC,CAAC,CAAC;;IAExD;IACA,MAAMC,WAAW,GAAG,IAAIP,MAAM,CAAC;MAC7BQ,gBAAgB,EAAEA,CAAA,KAAMH,MAAM;MAC9BI,cAAc,EAAE,IAAI;MACpBC,iBAAiB,EAAE,IAAI;MACvBC,iBAAiB,EAAE;IACrB,CAAC,CAAC;;IAEF;IACAJ,WAAW,CAACK,QAAQ,CAAC,CAAC;IACtBL,WAAW,CAACM,SAAS,GAAG,MAAM;MAC1BC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrC;IACJ,CAAC;;IAED;IACA;IACA;IACA;IACA;;IAEA;IACA,OAAO,MAAM;MACb;MACA;IAAA,CACC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEb,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BlB,OAAA;MAAAc,QAAA,EAAG;IAAwC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEV,CAAC;AAAChB,EAAA,CAtCID,kBAAkB;AAAAkB,EAAA,GAAlBlB,kBAAkB;AAwCxB,eAAeA,kBAAkB;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}